// File automatically generated by wgsl_bindgen^
//
// ^ wgsl_bindgen version 0.21.2
// Changes made to this file will not be saved.
// SourceHash: 40bc0462bf2dcb551c8a5e8f803a849d6943c0ca7d0d11117b12fef0831bf4a5

#![allow(unused, non_snake_case, non_camel_case_types, non_upper_case_globals)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
pub enum ShaderEntry
{
    Mandelbrot
}
impl ShaderEntry
{
    pub fn create_pipeline_layout(&self, device: &wgpu::Device) -> wgpu::PipelineLayout
    {
        match self
        {
            Self::Mandelbrot => mandelbrot::create_pipeline_layout(device)
        }
    }

    pub fn create_shader_module_embed_source(&self, device: &wgpu::Device) -> wgpu::ShaderModule
    {
        match self
        {
            Self::Mandelbrot => mandelbrot::create_shader_module_embed_source(device)
        }
    }
}
mod _root
{
    pub use super::*;
    pub trait SetBindGroup
    {
        fn set_bind_group(&mut self, index: u32, bind_group: &wgpu::BindGroup, offsets: &[wgpu::DynamicOffset]);
    }
    impl SetBindGroup for wgpu::RenderPass<'_>
    {
        fn set_bind_group(&mut self, index: u32, bind_group: &wgpu::BindGroup, offsets: &[wgpu::DynamicOffset])
        {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
    impl SetBindGroup for wgpu::RenderBundleEncoder<'_>
    {
        fn set_bind_group(&mut self, index: u32, bind_group: &wgpu::BindGroup, offsets: &[wgpu::DynamicOffset])
        {
            self.set_bind_group(index, bind_group, offsets);
        }
    }
}
pub mod layout_asserts
{
    use super::{_root, _root::*};
    const WGSL_BASE_TYPE_ASSERTS: () = {
        assert!(std::mem::size_of::<glam::IVec2>() == 8);
        assert!(std::mem::align_of::<glam::IVec2>() == 4);
        assert!(std::mem::size_of::<glam::IVec3>() == 12);
        assert!(std::mem::align_of::<glam::IVec3>() == 4);
        assert!(std::mem::size_of::<glam::IVec4>() == 16);
        assert!(std::mem::align_of::<glam::IVec4>() == 4);
        assert!(std::mem::size_of::<glam::UVec2>() == 8);
        assert!(std::mem::align_of::<glam::UVec2>() == 4);
        assert!(std::mem::size_of::<glam::UVec3>() == 12);
        assert!(std::mem::align_of::<glam::UVec3>() == 4);
        assert!(std::mem::size_of::<glam::UVec4>() == 16);
        assert!(std::mem::align_of::<glam::UVec4>() == 4);
        assert!(std::mem::size_of::<glam::Vec2>() == 8);
        assert!(std::mem::align_of::<glam::Vec2>() == 4);
        assert!(std::mem::size_of::<glam::Vec3>() == 12);
        assert!(std::mem::align_of::<glam::Vec3>() == 4);
        assert!(std::mem::size_of::<glam::Vec4>() == 16);
        assert!(std::mem::align_of::<glam::Vec4>() == 16);
        assert!(std::mem::size_of::<glam::Mat2>() == 16);
        assert!(std::mem::align_of::<glam::Mat2>() == 16);
        assert!(std::mem::size_of::<glam::Mat3A>() == 48);
        assert!(std::mem::align_of::<glam::Mat3A>() == 16);
        assert!(std::mem::size_of::<glam::Mat4>() == 64);
        assert!(std::mem::align_of::<glam::Mat4>() == 16);
    };
    const GLOBAL_BINDINGS_GLOBAL_UNIFORMS_ASSERTS: () = {
        assert!(std::mem::offset_of!(global_bindings::GlobalUniforms, window_size) == 0);
        assert!(std::mem::offset_of!(global_bindings::GlobalUniforms, center) == 8);
        assert!(std::mem::offset_of!(global_bindings::GlobalUniforms, zoom) == 16);
        assert!(std::mem::offset_of!(global_bindings::GlobalUniforms, rot) == 20);
        assert!(std::mem::offset_of!(global_bindings::GlobalUniforms, exp) == 24);
        assert!(std::mem::size_of::<global_bindings::GlobalUniforms>() == 32);
    };
}
pub mod global_bindings
{
    use super::{_root, _root::*};
    #[repr(C)]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct VertexInput
    {
        pub vertex_id: u32
    }
    impl VertexInput
    {
        pub const fn new(vertex_id: u32) -> Self
        {
            Self { vertex_id }
        }
    }
    impl VertexInput
    {
        pub const VERTEX_ATTRIBUTES: [wgpu::VertexAttribute; 1] = [wgpu::VertexAttribute {
            format: wgpu::VertexFormat::Uint32,
            offset: std::mem::offset_of!(Self, vertex_id) as u64,
            shader_location: 0
        }];

        pub const fn vertex_buffer_layout(step_mode: wgpu::VertexStepMode) -> wgpu::VertexBufferLayout<'static>
        {
            wgpu::VertexBufferLayout {
                array_stride: std::mem::size_of::<Self>() as u64,
                step_mode,
                attributes: &Self::VERTEX_ATTRIBUTES
            }
        }
    }
    #[repr(C, align(8))]
    #[derive(Debug, PartialEq, Clone, Copy)]
    pub struct GlobalUniforms
    {
        #[doc = "offset: 0, size: 8, type: `vec2<u32>`"]
        pub window_size: glam::UVec2,
        #[doc = "offset: 8, size: 8, type: `vec2<f32>`"]
        pub center: glam::Vec2,
        #[doc = "offset: 16, size: 4, type: `f32`"]
        pub zoom: f32,
        #[doc = "offset: 20, size: 4, type: `f32`"]
        pub rot: f32,
        #[doc = "offset: 24, size: 8, type: `vec2<f32>`"]
        pub exp: glam::Vec2
    }
    impl GlobalUniforms
    {
        pub const fn new(window_size: glam::UVec2, center: glam::Vec2, zoom: f32, rot: f32, exp: glam::Vec2) -> Self
        {
            Self {
                window_size,
                center,
                zoom,
                rot,
                exp
            }
        }
    }
    #[derive(Debug)]
    pub struct WgpuBindGroup0EntriesParams<'a>
    {
        pub globals: wgpu::BufferBinding<'a>
    }
    #[derive(Clone, Debug)]
    pub struct WgpuBindGroup0Entries<'a>
    {
        pub globals: wgpu::BindGroupEntry<'a>
    }
    impl<'a> WgpuBindGroup0Entries<'a>
    {
        pub fn new(params: WgpuBindGroup0EntriesParams<'a>) -> Self
        {
            Self {
                globals: wgpu::BindGroupEntry {
                    binding: 0,
                    resource: wgpu::BindingResource::Buffer(params.globals)
                }
            }
        }

        pub fn into_array(self) -> [wgpu::BindGroupEntry<'a>; 1]
        {
            [self.globals]
        }

        pub fn collect<B: FromIterator<wgpu::BindGroupEntry<'a>>>(self) -> B
        {
            self.into_array().into_iter().collect()
        }
    }
    #[derive(Debug)]
    pub struct WgpuBindGroup0(wgpu::BindGroup);
    impl WgpuBindGroup0
    {
        pub const LAYOUT_DESCRIPTOR: wgpu::BindGroupLayoutDescriptor<'static> = wgpu::BindGroupLayoutDescriptor {
            label: Some("GlobalBindings::BindGroup0::LayoutDescriptor"),
            entries: &[
                #[doc = " @binding(0): \"_root::global_bindings::globals\""]
                wgpu::BindGroupLayoutEntry {
                    binding: 0,
                    visibility: wgpu::ShaderStages::VERTEX_FRAGMENT,
                    ty: wgpu::BindingType::Buffer {
                        ty: wgpu::BufferBindingType::Uniform,
                        has_dynamic_offset: false,
                        min_binding_size: std::num::NonZeroU64::new(std::mem::size_of::<_root::global_bindings::GlobalUniforms>() as _)
                    },
                    count: None
                }
            ]
        };

        pub fn get_bind_group_layout(device: &wgpu::Device) -> wgpu::BindGroupLayout
        {
            device.create_bind_group_layout(&Self::LAYOUT_DESCRIPTOR)
        }

        pub fn from_bindings(device: &wgpu::Device, bindings: WgpuBindGroup0Entries) -> Self
        {
            let bind_group_layout = Self::get_bind_group_layout(device);
            let entries = bindings.into_array();
            let bind_group = device.create_bind_group(&wgpu::BindGroupDescriptor {
                label: Some("GlobalBindings::BindGroup0"),
                layout: &bind_group_layout,
                entries: &entries
            });
            Self(bind_group)
        }

        pub fn set(&self, pass: &mut impl SetBindGroup)
        {
            pass.set_bind_group(0, &self.0, &[]);
        }
    }
}
pub mod bytemuck_impls
{
    use super::{_root, _root::*};
    unsafe impl bytemuck::Zeroable for global_bindings::VertexInput {}
    unsafe impl bytemuck::Pod for global_bindings::VertexInput {}
    unsafe impl bytemuck::Zeroable for global_bindings::GlobalUniforms {}
    unsafe impl bytemuck::Pod for global_bindings::GlobalUniforms {}
}
pub mod mandelbrot
{
    use super::{_root, _root::*};
    pub const ENTRY_VS_MAIN: &str = "vs_main";
    pub const ENTRY_FS_MAIN: &str = "fs_main";
    #[derive(Debug)]
    pub struct VertexEntry<const N: usize>
    {
        pub entry_point: &'static str,
        pub buffers: [wgpu::VertexBufferLayout<'static>; N],
        pub constants: Vec<(&'static str, f64)>
    }
    pub fn vertex_state<'a, const N: usize>(module: &'a wgpu::ShaderModule, entry: &'a VertexEntry<N>) -> wgpu::VertexState<'a>
    {
        wgpu::VertexState {
            module,
            entry_point: Some(entry.entry_point),
            buffers: &entry.buffers,
            compilation_options: wgpu::PipelineCompilationOptions {
                constants: &entry.constants,
                ..Default::default()
            }
        }
    }
    pub fn vs_main_entry(vertex_input: wgpu::VertexStepMode) -> VertexEntry<1>
    {
        VertexEntry {
            entry_point: ENTRY_VS_MAIN,
            buffers: [global_bindings::VertexInput::vertex_buffer_layout(vertex_input)],
            constants: Default::default()
        }
    }
    #[derive(Debug)]
    pub struct FragmentEntry<const N: usize>
    {
        pub entry_point: &'static str,
        pub targets: [Option<wgpu::ColorTargetState>; N],
        pub constants: Vec<(&'static str, f64)>
    }
    pub fn fragment_state<'a, const N: usize>(module: &'a wgpu::ShaderModule, entry: &'a FragmentEntry<N>) -> wgpu::FragmentState<'a>
    {
        wgpu::FragmentState {
            module,
            entry_point: Some(entry.entry_point),
            targets: &entry.targets,
            compilation_options: wgpu::PipelineCompilationOptions {
                constants: &entry.constants,
                ..Default::default()
            }
        }
    }
    pub fn fs_main_entry(targets: [Option<wgpu::ColorTargetState>; 1]) -> FragmentEntry<1>
    {
        FragmentEntry {
            entry_point: ENTRY_FS_MAIN,
            targets,
            constants: Default::default()
        }
    }
    #[doc = " Bind groups can be set individually using their set(render_pass) method, or all at once using `WgpuBindGroups::set`."]
    #[doc = " For optimal performance with many draw calls, it's recommended to organize bindings into bind groups based on update frequency:"]
    #[doc = "   - Bind group 0: Least frequent updates (e.g. per frame resources)"]
    #[doc = "   - Bind group 1: More frequent updates"]
    #[doc = "   - Bind group 2: More frequent updates"]
    #[doc = "   - Bind group 3: Most frequent updates (e.g. per draw resources)"]
    #[derive(Debug, Copy, Clone)]
    pub struct WgpuBindGroups<'a>
    {
        pub bind_group0: &'a global_bindings::WgpuBindGroup0
    }
    impl<'a> WgpuBindGroups<'a>
    {
        pub fn set(&self, pass: &mut impl SetBindGroup)
        {
            self.bind_group0.set(pass);
        }
    }
    #[derive(Debug)]
    pub struct WgpuPipelineLayout;
    impl WgpuPipelineLayout
    {
        pub fn bind_group_layout_entries(entries: [wgpu::BindGroupLayout; 1]) -> [wgpu::BindGroupLayout; 1]
        {
            entries
        }
    }
    pub fn create_pipeline_layout(device: &wgpu::Device) -> wgpu::PipelineLayout
    {
        device.create_pipeline_layout(&wgpu::PipelineLayoutDescriptor {
            label: Some("Mandelbrot::PipelineLayout"),
            bind_group_layouts: &[&global_bindings::WgpuBindGroup0::get_bind_group_layout(device)],
            push_constant_ranges: &[]
        })
    }
    pub fn create_shader_module_embed_source(device: &wgpu::Device) -> wgpu::ShaderModule
    {
        let source = std::borrow::Cow::Borrowed(SHADER_STRING);
        device.create_shader_module(wgpu::ShaderModuleDescriptor {
            label: Some("mandelbrot.wgsl"),
            source: wgpu::ShaderSource::Wgsl(source)
        })
    }
    pub const SHADER_STRING: &str = r#"
struct VertexInputX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX {
    @builtin(vertex_index) vertex_index: u32,
    @location(0) @interpolate(flat) vertex_id: u32,
}

struct GlobalUniformsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX {
    window_size: vec2<u32>,
    center: vec2<f32>,
    zoom: f32,
    rot: f32,
    exp: vec2<f32>,
}

@group(0) @binding(0) 
var<uniform> globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX: GlobalUniformsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX;

fn hsl2rgbX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(c: vec3<f32>) -> vec3<f32> {
    let rgb = clamp((abs((((vec3((c.x * 6f)) + vec3<f32>(0f, 4f, 2f)) % vec3(6f)) - vec3(3f))) - vec3(1f)), vec3<f32>(0f, 0f, 0f), vec3<f32>(1f, 1f, 1f));
    return (vec3(c.z) + ((c.y * (rgb - vec3(0.5f))) * (1f - abs(((2f * c.z) - 1f)))));
}

fn cisX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(rot: f32) -> vec2<f32> {
    return vec2<f32>(cos(rot), sin(rot));
}

fn cmulX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(lhs: vec2<f32>, rhs: vec2<f32>) -> vec2<f32> {
    return (mat2x2<f32>(vec2<f32>(lhs.x, lhs.y), vec2<f32>(-(lhs.y), lhs.x)) * rhs);
}

fn norm_sqrX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x: vec2<f32>) -> f32 {
    return dot(x, x);
}

fn normX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_1: vec2<f32>) -> f32 {
    let _e1 = norm_sqrX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_1);
    return sqrt(_e1);
}

fn argX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_2: vec2<f32>) -> f32 {
    return atan2(x_2.y, x_2.x);
}

fn clogX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_3: vec2<f32>) -> vec2<f32> {
    let _e1 = norm_sqrX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_3);
    let _e5 = argX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_3);
    return vec2<f32>((log(_e1) / 2f), _e5);
}

fn cexpX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_4: vec2<f32>) -> vec2<f32> {
    let _e4 = cisX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_4.y);
    return (exp(x_4.x) * _e4);
}

fn powcX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_5: vec2<f32>, y: vec2<f32>) -> vec2<f32> {
    let _e1 = clogX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(x_5);
    let _e3 = cmulX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(y, _e1);
    let _e4 = cexpX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e3);
    return _e4;
}

@vertex 
fn vs_main(in: VertexInputX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX) -> @builtin(position) vec4<f32> {
    let corner = (in.vertex_index % 3u);
    let n = (((in.vertex_index / 3u) % 2u) == 1u);
    let _e21 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.x;
    let _e27 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.x;
    let _e42 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.y;
    let _e48 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.y;
    let pos = vec2<f32>((f32((u32(((corner == 1u) || ((corner == 0u) && n))) * _e21)) - (f32(_e27) / 2f)), (f32((u32(((corner == 2u) || ((corner == 0u) && n))) * _e42)) - (f32(_e48) / 2f)));
    return vec4<f32>(pos, 0f, 1f);
}

@fragment 
fn fs_main(@builtin(position) position: vec4<f32>) -> @location(0) vec4<f32> {
    var z: vec2<f32>;
    var i: i32 = 0i;

    let _e6 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.x;
    let _e11 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.window_size.y;
    let pos_1 = (position.xy - (vec2<f32>(f32(_e6), f32(_e11)) / vec2(2f)));
    let _e20 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.zoom;
    let _e25 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.rot;
    let _e26 = cisX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e25);
    let _e27 = cmulX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX((pos_1 / vec2(_e20)), _e26);
    let _e30 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.center;
    let c_1 = (_e27 - _e30);
    z = c_1;
    loop {
        let _e34 = i;
        let _e37 = z;
        let _e38 = norm_sqrX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e37);
        if ((_e34 < 64i) && (_e38 < 4f)) {
        } else {
            break;
        }
        {
            let _e42 = z;
            let _e45 = globalsX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX.exp;
            let _e46 = powcX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e42, _e45);
            z = (_e46 + c_1);
        }
        continuing {
            let _e49 = i;
            i = (_e49 + 1i);
        }
    }
    let _e51 = z;
    let _e52 = normX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e51);
    let z_norm = f32(_e52);
    let _e54 = z;
    let _e55 = argX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(_e54);
    let hue = ((f32(_e55) / 6.2831855f) + 0.5f);
    let _e61 = i;
    let t = f32(_e61);
    let _e67 = hsl2rgbX_naga_oil_mod_XM5WG6YTBNRPWE2LOMRUW4Z3TX(vec3<f32>(hue, 0.5f, (z_norm % 1f)));
    return vec4<f32>(_e67, 1f);
}
"#;
}
